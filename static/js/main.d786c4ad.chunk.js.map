{"version":3,"sources":["components/SearchBox.js","components/Title.js","containers/Header.js","components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["SearchBox","searchChange","id","className","type","placeholder","onChange","Title","Header","onSearchChange","event","searchField_value","target","value","setState","searchField","filteredRobots","state","robots","filter","includesSearchField","props","searching","robot","includes_field","field","toString","toLowerCase","includes","this","fetch","then","response","json","users","Component","Card","name","email","username","src","alt","printCard","CardList","map","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","App","changedSearchField","robotsFiltered","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d786c4ad.chunk.js","sourcesContent":["import React from 'react';\n//import tachyons from 'tachyons';\nconst SearchBox = ({ searchChange }) => {\n    return (\n            <div id=\"searchbox\">\n                <input id='search-input' className='tc pa2 navy bg-light-blue' type=\"search\" placeholder='search a robot' onChange={searchChange}/>\n            </div>\n    );\n}\n\n\nexport default SearchBox;\n","const Title = () => {\n    return (\n        <h1>Robofriends</h1>\n    );\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport Title from '../components/Title';\n\nclass Header extends Component {\n        /*\n         * It's important for Header to have its own robots state\n         * so we can change the App's robots state without modifying \n         * this one, otherwise we can't recover the robots after filtering\n         */\n    constructor() {\n        super();\n        this.state = {\n            robots: [],\n            searchField : \"\"\n        }\n    }\n\n    onSearchChange = (event) => {\n        const searchField_value = event.target.value;\n        this.setState({ searchField:searchField_value }, () => {\n            // We destructure for a clear syntax\n            const { robots } = this.state;\n            const filteredRobots = robots.filter(this.includesSearchField)\n            this.props.searching(filteredRobots)\n\n        });\n    }\n\n    includesSearchField = (robot) => {\n    let includes_field = false\n        // We destructure for a clear syntax\n        const { searchField } = this.state\n        // We search by all the fields of the robot\n        for(const field in robot){\n            includes_field = robot[field]\n                .toString()\n                .toLowerCase()\n                .includes( searchField.toLowerCase() )\n\n            if (includes_field) return includes_field\n        }\n\n        // NOT REACHEABLE\n        // Prevents bug if there are no fields on the robot\n        return false;\n    }\n\n    render() {\n        return (\n            <div id=\"header\" className='mv3'>\n                <Title />\n                <SearchBox searchChange={this.onSearchChange}/>\n            </div>\n        );\n    };\n\n    componentDidMount() {\n        // We fetch the robots from a test api into json\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then( response =>  response.json() )\n            .then( users =>  this.setState({ robots : users }) )\n    }\n}\n\nexport default Header;\n","import 'tachyons';\nconst Card = ({name, email, id, username}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}?100x100`} alt=\"robots\" />\n            <h2>@{username}</h2>\n            <h3><em>{name}</em></h3>\n            <p>{email}</p>\n        </div>\n    );\n\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card.js';\n\nconst CardList = ({ robots }) => {\n    // The next line it's just to test the ErrorBoundry component\n    //throw new Error('Something went wrong')\n    return (\n        <div className=\"cards-wrapper tc bg-dark-green\">\n            {robots.map(printCard)}\n        </div>\n    );\n}\n\nconst printCard = ( { id, name, email, username }) => {\n    return <Card key={id} id={id} name={name} email={email} username={username} />\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return <div style={{ overflowY : 'scroll', border : '1px solid black', height : '80vh'}}>\n        {props.children}\n        </div>\n}\n\nexport default Scroll;\n","import React, { Component } from 'react'\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super()\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true })\n    }\n    render() {\n        const { hasError } = this.state\n                const error_message = <p>Error loading the component</p>\n                return hasError ?  error_message : this.props.children\n    }\n\n}\n\nexport default ErrorBoundry\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport CardList from '../components/CardList';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry'\n\nclass App extends Component {\n    constructor() {\n            super();\n            this.state = {\n                robots: []\n            };\n\n        }\n\n        /*\n        * Function that updates the robot state list based on searchBox filter\n        */\n        changedSearchField = (robotsFiltered) => { this.setState({ robots : robotsFiltered }) }\n\n    render(){\n        // We destructure for a clear syntax\n        const { robots } = this.state\n        return (\n            <div id=\"container\" className='tc'>\n                <Header robots = { robots } searching={this.changedSearchField}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={ robots } />\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n    };\n    componentDidMount() {\n        // We fetch the robots from a test api into json\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then( response =>  response.json() )\n            .then( users =>  this.setState({ robots : users }) )\n    }\n}\n\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport reportWebVitals from './reportWebVitals.js';\n\nReactDOM.render(\n    <React.StrictMode> \n        <App />\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// Web Vitals are a set of useful metrics that aim to capture the user experience of a web page. In Create React App, a third-party library is used to measure these metrics (web-vitals).\nreportWebVitals(/*console.log*/); \n\n"],"sourceRoot":""}